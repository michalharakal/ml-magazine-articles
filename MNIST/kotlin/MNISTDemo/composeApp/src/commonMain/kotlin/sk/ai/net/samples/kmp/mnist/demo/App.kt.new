package sk.ai.net.samples.kmp.mnist.demo

import androidx.compose.foundation.layout.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import cafe.adriel.voyager.navigator.tab.CurrentTab
import cafe.adriel.voyager.navigator.tab.TabNavigator
import kotlinx.io.Source
import org.jetbrains.compose.ui.tooling.preview.Preview
import sk.ai.net.samples.kmp.mnist.demo.navigation.DrawingTab
import sk.ai.net.samples.kmp.mnist.demo.navigation.HomeTab
import sk.ai.net.samples.kmp.mnist.demo.navigation.SettingsTab
import sk.ai.net.samples.kmp.mnist.demo.theme.AppTheme
import sk.ai.net.samples.kmp.mnist.demo.theme.AppSurface
import sk.ai.net.samples.kmp.mnist.demo.ui.LocalHandleSource
import sk.ai.net.samples.kmp.mnist.demo.ui.Orientation
import sk.ai.net.samples.kmp.mnist.demo.ui.ResponsiveLayout
import sk.ai.net.samples.kmp.mnist.demo.ui.WindowSizeClass
import sk.ai.net.samples.kmp.mnist.demo.ui.isLandscape

@Composable
@Preview
fun App(handleSource: () -> Source) {
    AppTheme {
        AppSurface {
            // Provide the handleSource function to all composables in the app
            CompositionLocalProvider(LocalHandleSource provides handleSource) {
                // Create tab navigator with HomeTab as the initial tab
                TabNavigator(HomeTab) { navigator ->
                    // Use ResponsiveLayout to adapt to different screen sizes and orientations
                    ResponsiveLayout { windowSizeClass, orientation ->
                        if (orientation.isLandscape() && windowSizeClass != WindowSizeClass.COMPACT) {
                            // Use side navigation for landscape on larger screens
                            Row(modifier = Modifier.fillMaxSize()) {
                                // Side navigation
                                NavigationRail(
                                    modifier = Modifier.fillMaxHeight()
                                ) {
                                    Column(
                                        modifier = Modifier.fillMaxHeight(),
                                        horizontalAlignment = Alignment.CenterHorizontally,
                                        verticalArrangement = Arrangement.spacedBy(16.dp, Alignment.CenterVertically)
                                    ) {
                                        NavigationRailItem(
                                            selected = navigator.current == HomeTab,
                                            onClick = { navigator.current = HomeTab },
                                            label = { Text("Home") },
                                            icon = { /* No icon for now */ }
                                        )
                                        
                                        NavigationRailItem(
                                            selected = navigator.current is DrawingTab,
                                            onClick = { navigator.current = DrawingTab(handleSource) },
                                            label = { Text("Draw") },
                                            icon = { /* No icon for now */ }
                                        )
                                        
                                        NavigationRailItem(
                                            selected = navigator.current == SettingsTab,
                                            onClick = { navigator.current = SettingsTab },
                                            label = { Text("Settings") },
                                            icon = { /* No icon for now */ }
                                        )
                                    }
                                }
                                
                                // Content area
                                Box(
                                    modifier = Modifier
                                        .weight(1f)
                                        .fillMaxHeight()
                                ) {
                                    CurrentTab()
                                }
                            }
                        } else {
                            // Use bottom navigation for portrait and compact screens
                            Scaffold(
                                bottomBar = {
                                    NavigationBar {
                                        // Home tab
                                        NavigationBarItem(
                                            selected = navigator.current == HomeTab,
                                            onClick = { navigator.current = HomeTab },
                                            icon = { /* No icon for now */ },
                                            label = { Text("Home") }
                                        )
                                        
                                        // Drawing tab
                                        NavigationBarItem(
                                            selected = navigator.current is DrawingTab,
                                            onClick = { navigator.current = DrawingTab(handleSource) },
                                            icon = { /* No icon for now */ },
                                            label = { Text("Draw") }
                                        )
                                        
                                        // Settings tab
                                        NavigationBarItem(
                                            selected = navigator.current == SettingsTab,
                                            onClick = { navigator.current = SettingsTab },
                                            icon = { /* No icon for now */ },
                                            label = { Text("Settings") }
                                        )
                                    }
                                }
                            ) { paddingValues ->
                                // Display the current tab content
                                Box(
                                    modifier = Modifier
                                        .fillMaxSize()
                                        .padding(paddingValues)
                                ) {
                                    CurrentTab()
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}